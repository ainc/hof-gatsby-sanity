{"version":3,"file":"selector.is-at-the-start-of-block.js","sources":["../../src/behavior-actions/behavior.guards.ts","../../src/selectors/selector.get-selected-spans.ts","../../src/selectors/selectors.ts","../../src/selectors/selector.get-active-list-item.ts","../../src/selectors/selector.get-active-style.ts","../../src/selectors/selector.is-selection-collapsed.ts","../../src/selectors/selector.is-selection-expanded.ts","../../src/selectors/selector.is-active-annotation.ts","../../src/selectors/selector.is-active-decorator.ts","../../src/selectors/selector.is-active-list-item.ts","../../src/selectors/selector.is-active-style.ts","../../src/selectors/selector.is-at-the-end-of-block.ts","../../src/selectors/selector.is-at-the-start-of-block.ts"],"sourcesContent":["import {\n  isPortableTextListBlock,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\n\n/**\n * @alpha\n */\nexport type BehaviorGuards = ReturnType<typeof createGuards>\n\nexport function createGuards({schema}: {schema: EditorSchema}) {\n  function isListBlock(block: unknown): block is PortableTextListBlock {\n    return isPortableTextListBlock(block) && block._type === schema.block.name\n  }\n\n  function isTextBlock(block: unknown): block is PortableTextTextBlock {\n    return isPortableTextTextBlock(block) && block._type === schema.block.name\n  }\n\n  return {isListBlock, isTextBlock}\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }>\n> = ({context}) => {\n  if (!context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }> = []\n\n  const startPoint = context.selection.backward\n    ? context.selection.focus\n    : context.selection.anchor\n  const endPoint = context.selection.backward\n    ? context.selection.anchor\n    : context.selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startSpanKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endSpanKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  for (const block of context.value) {\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (selectedSpans.length > 0) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextListBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const guards = createGuards(context)\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && guards.isListBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const focusBlock = getFocusBlock({context})\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  const focusBlock = getFocusTextBlock({context})\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = ({context}) => {\n  const focusChild = getFocusChild({context})\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  const node = context.value[context.value.length - 1]\n    ? context.value[context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = ({context}) => {\n  if (!context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock({context})\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = ({context}) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock({context})\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = ({context}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(context)\n  const selectedBlocks = getSelectedBlocks({context}).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = ({\n  context,\n}) => {\n  if (!context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(context)\n  const selectedBlocks = getSelectedBlocks({context}).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = ({context}) => {\n  if (!context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(context.selection.anchor.path) ===\n      JSON.stringify(context.selection.focus.path) &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = ({context}) => {\n  return !isSelectionCollapsed({context})\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const focusSpan = getFocusSpan(snapshot)\n\n    const selectedSpans = isSelectionExpanded(snapshot)\n      ? getSelectedSpans(snapshot)\n      : focusSpan\n        ? [focusSpan]\n        : []\n\n    if (selectedSpans.length === 0) {\n      return false\n    }\n\n    if (\n      selectedSpans.some(\n        (span) => !span.node.marks || span.node.marks?.length === 0,\n      )\n    ) {\n      return false\n    }\n\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isPortableTextTextBlock(block.node) ? (block.node.markDefs ?? []) : [],\n    )\n\n    return selectedSpans.every((span) => {\n      const spanMarkDefs =\n        span.node.marks?.flatMap((mark) => {\n          const markDef = selectionMarkDefs.find(\n            (markDef) => markDef._key === mark,\n          )\n\n          return markDef ? [markDef._type] : []\n        }) ?? []\n\n      return spanMarkDefs.includes(annotation)\n    })\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    return snapshot.context.activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return ({context}) => {\n    if (!context.selection || !isSelectionCollapsed({context})) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint(block)\n\n    return utils.isEqualSelectionPoints(context.selection.focus, blockEndPoint)\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return ({context}) => {\n    if (!context.selection || !isSelectionCollapsed({context})) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint(block)\n\n    return utils.isEqualSelectionPoints(\n      context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n"],"names":["createGuards","schema","isListBlock","block","isPortableTextListBlock","_type","name","isTextBlock","isPortableTextTextBlock","getSelectedSpans","context","selection","selectedSpans","startPoint","backward","focus","anchor","endPoint","startBlockKey","isKeySegment","path","_key","undefined","endBlockKey","startSpanKey","endSpanKey","value","child","children","isPortableTextSpan","offset","text","length","push","node","getFocusBlock","key","find","getFocusListBlock","guards","focusBlock","getFocusTextBlock","getFocusBlockObject","getFocusChild","span","getFocusSpan","focusChild","getFirstBlock","getLastBlock","getSelectedBlocks","selectedBlocks","startKey","endKey","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","getActiveListItem","selectedTextBlocks","map","filter","firstTextBlock","at","firstListItem","listItem","every","getActiveStyle","firstStyle","style","isSelectionCollapsed","JSON","stringify","isSelectionExpanded","isActiveAnnotation","annotation","snapshot","focusSpan","some","marks","selectionMarkDefs","flatMap","markDefs","mark","markDef","includes","isActiveDecorator","decorator","activeDecorators","isActiveListItem","isActiveStyle","isAtTheEndOfBlock","blockEndPoint","utils","isAtTheStartOfBlock","blockStartPoint"],"mappings":"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"}