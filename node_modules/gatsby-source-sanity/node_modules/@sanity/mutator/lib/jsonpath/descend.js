"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = descend;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// Splits an expression into a set of heads, tails. A head is the next leaf node to
// check for matches, and a tail is everything that follows it. Matching is done by
// matching heads, then proceedint to the matching value, splitting the tail into
// heads and tails and checking the heads against the new value, and so on.

// expands an expression into one or more head/tail pairs
function descend(tail) {
  return spreadIfUnionHead(...splitIfPath(tail));
}

// Split path in [head, tail]
function splitIfPath(tail) {
  if (tail.type !== 'path') {
    return [tail, null];
  }
  var nodes = tail.nodes;
  if (nodes.length === 0) {
    return [null, null];
  } else if (nodes.length === 1) {
    return [nodes[0], null];
  }
  return [nodes[0], {
    type: 'path',
    nodes: nodes.slice(1)
  }];
}
function concatPaths(path1, path2) {
  if (!path1 && !path2) {
    return null;
  }
  var nodes1 = path1 ? path1.nodes : [];
  var nodes2 = path2 ? path2.nodes : [];
  return {
    type: 'path',
    nodes: nodes1.concat(nodes2)
  };
}

// Spreads a union head into several heads/tails
function spreadIfUnionHead(head, tail) {
  if (head.type !== 'union') {
    return [[head, tail]];
  }
  return head.nodes.map(node => {
    if (node.type === 'path') {
      var _splitIfPath = splitIfPath(node),
        _splitIfPath2 = _slicedToArray(_splitIfPath, 2),
        subHead = _splitIfPath2[0],
        subTail = _splitIfPath2[1];
      return [subHead, concatPaths(subTail, tail)];
    }
    return [node, tail];
  });
}