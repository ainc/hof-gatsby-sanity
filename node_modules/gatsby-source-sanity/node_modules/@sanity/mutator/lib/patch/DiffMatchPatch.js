"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var DMP = _interopRequireWildcard(require("diff-match-patch"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var dmp = new DMP.diff_match_patch();
function applyPatch(patch, oldValue) {
  // Silently avoid patching if the value type is not string
  if (typeof oldValue !== 'string') return oldValue;
  return dmp.patch_apply(patch, oldValue)[0];
}
class DiffMatchPatch {
  constructor(id, path, dmpPatchSrc) {
    _defineProperty(this, "path", void 0);
    _defineProperty(this, "dmpPatch", void 0);
    _defineProperty(this, "id", void 0);
    this.id = id;
    this.path = path;
    this.dmpPatch = dmp.patch_fromText(dmpPatchSrc);
  }
  apply(targets, accessor) {
    var result = accessor;
    // The target must be a container type
    if (result.containerType() == 'primitive') {
      return result;
    }
    targets.forEach(target => {
      if (target.isIndexReference()) {
        target.toIndicies(accessor).forEach(i => {
          // Skip patching unless the index actually currently exists
          if (result.getIndex(i)) {
            var oldValue = result.getIndex(i).get();
            var nextValue = applyPatch(this.dmpPatch, oldValue);
            result = result.setIndex(i, nextValue);
          }
        });
      } else if (target.isAttributeReference() && result.hasAttribute(target.name())) {
        var oldValue = result.getAttribute(target.name()).get();
        var nextValue = applyPatch(this.dmpPatch, oldValue);
        result = result.setAttribute(target.name(), nextValue);
      } else {
        throw new Error("Unable to apply diffMatchPatch to target ".concat(target.toString()));
      }
    });
    return result;
  }
}
exports.default = DiffMatchPatch;