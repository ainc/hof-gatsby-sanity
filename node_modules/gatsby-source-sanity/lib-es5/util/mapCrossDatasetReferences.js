"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapCrossDatasetReferences = void 0;
var graphql_1 = require("graphql");
var CDR_DIRECTIVE = 'crossDatasetReference';
// Function to extract array of string value from a ValueNode
var getStringArrayArgumentValuesFromDirective = function (directive, argument) {
    var e_1, _a;
    var values = [];
    try {
        for (var _b = __values(directive.arguments || []), _c = _b.next(); !_c.done; _c = _b.next()) {
            var arg = _c.value;
            if (arg.name.value === argument) {
                if (arg.value.kind === graphql_1.Kind.LIST) {
                    arg.value.values.forEach(function (value) {
                        if (value.kind === graphql_1.Kind.STRING) {
                            values.push(value.value);
                        }
                    });
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return values;
};
var referenceDirectiveNode = {
    kind: graphql_1.Kind.DIRECTIVE,
    name: {
        kind: graphql_1.Kind.NAME,
        value: 'reference',
    },
};
var typeNameForMapping = function (typeNames) {
    return typeNames.join('Or');
};
// This function rewrites the Schema to treat crossDatasetReference fields as
// references, since we will assume the required schemas and content is added as
// additional source plugin configurations.
function mapCrossDatasetReferences(api) {
    var _a, _b;
    var astNode = (0, graphql_1.parse)(api);
    // First pass: Find any named types that have cdr directives on them
    var cdrMapping = {};
    (0, graphql_1.visit)(astNode, (_a = {
            enter: function (node) { }
        },
        _a[graphql_1.Kind.OBJECT_TYPE_DEFINITION] = function (node) {
            var _a;
            if (node.name.value) {
                var cdrDirective = (_a = node.directives) === null || _a === void 0 ? void 0 : _a.find(function (d) { return d.name.value === CDR_DIRECTIVE; });
                if (cdrDirective) {
                    // This is a type that has a cdr directive on it
                    //let typeName = getStringArgumentValueFromDirective(cdrDirective, 'typeName')
                    var typeNames = getStringArrayArgumentValuesFromDirective(cdrDirective, 'typeNames');
                    if (typeNames) {
                        cdrMapping[node.name.value] = typeNames;
                    }
                }
            }
        },
        _a));
    var unionDefinitions = [];
    // Find all the values in cdrMapping that have more than 1 value
    for (var key in cdrMapping) {
        if (cdrMapping[key].length > 1) {
            // Create a union type for this set of types
            unionDefinitions.push({
                kind: graphql_1.Kind.UNION_TYPE_DEFINITION,
                name: {
                    kind: graphql_1.Kind.NAME,
                    value: typeNameForMapping(cdrMapping[key]),
                },
                types: cdrMapping[key].map(function (key) {
                    return {
                        kind: graphql_1.Kind.NAMED_TYPE,
                        name: {
                            kind: graphql_1.Kind.NAME,
                            value: key,
                        },
                    };
                }),
            });
        }
    }
    // Add our new Union types
    var newAST = __assign(__assign({}, astNode), { definitions: __spreadArray(__spreadArray([], __read(astNode.definitions), false), __read(unionDefinitions), false) });
    // Second pass: Rewrite the schema to replace CDR types with the appropriate
    // target type and add @reference directive where appropriate
    var modifiedTypes = (0, graphql_1.visit)(newAST, (_b = {},
        _b[graphql_1.Kind.FIELD_DEFINITION] = function (fieldNode) {
            var _a;
            var cdrDirective = (_a = fieldNode.directives) === null || _a === void 0 ? void 0 : _a.find(function (d) { return d.name.value === CDR_DIRECTIVE; });
            var mappedTypeNames = undefined;
            if (fieldNode.type.kind === graphql_1.Kind.NAMED_TYPE) {
                if (cdrDirective) {
                    // This is a field that has a cdr directive on it
                    // TODO: look up any configured typePrefixes for the dataset
                    mappedTypeNames = getStringArrayArgumentValuesFromDirective(cdrDirective, 'typeNames');
                }
                else {
                    // This is a field that does not have a cdr directive on it
                    // Check if the field type is a CDR type
                    var fieldName = fieldNode.type.name.value;
                    if (fieldName in cdrMapping) {
                        mappedTypeNames = cdrMapping[fieldName];
                    }
                }
            }
            if (fieldNode.type.kind === graphql_1.Kind.LIST_TYPE) {
                var innerType = fieldNode.type.type; // TypeScript type assertion
                var fieldName = innerType.name.value;
                // Check if the field type is a CDR type
                if (fieldName in cdrMapping) {
                    mappedTypeNames = cdrMapping[fieldName];
                }
            }
            if (mappedTypeNames) {
                // Replace the cdr directive with a reference directive and replace
                // the type name with the actual target type
                var directives = (fieldNode.directives || []).filter(function (d) { return d.name.value !== CDR_DIRECTIVE; });
                if (cdrDirective) {
                    // If there was a cdr directive, replace it with a reference directive
                    directives = __spreadArray(__spreadArray([], __read(directives), false), [referenceDirectiveNode], false);
                }
                if (fieldNode.type.kind === graphql_1.Kind.NAMED_TYPE) {
                    return __assign(__assign({}, fieldNode), { directives: directives, type: __assign(__assign({}, fieldNode.type), { name: __assign(__assign({}, fieldNode.type.name), { value: typeNameForMapping(mappedTypeNames) }) }) });
                }
                if (fieldNode.type.kind === graphql_1.Kind.LIST_TYPE) {
                    return __assign(__assign({}, fieldNode), { type: __assign(__assign({}, fieldNode.type), { type: {
                                kind: graphql_1.Kind.NAMED_TYPE,
                                name: {
                                    kind: graphql_1.Kind.NAME,
                                    value: typeNameForMapping(mappedTypeNames),
                                },
                            } }) });
                }
            }
            return fieldNode;
        },
        _b[graphql_1.Kind.UNION_TYPE_DEFINITION] = function (node) {
            var _a;
            // Check if any of the union types match keys in the cdrMapping
            var modifiedTypes = (_a = node.types) === null || _a === void 0 ? void 0 : _a.map(function (typeNode) {
                var typeName = typeNode.name.value;
                if (cdrMapping[typeName]) {
                    return __assign(__assign({}, typeNode), { name: {
                            kind: graphql_1.Kind.NAME,
                            value: cdrMapping[typeName],
                        } });
                }
                return typeNode; // return the type unchanged if it's not in the cdrMapping
            });
            // Return the modified union node
            return __assign(__assign({}, node), { types: modifiedTypes });
        },
        _b));
    return (0, graphql_1.print)(modifiedTypes);
}
exports.mapCrossDatasetReferences = mapCrossDatasetReferences;
//# sourceMappingURL=mapCrossDatasetReferences.js.map