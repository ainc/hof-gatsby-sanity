"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rewriteGraphQLSchema = void 0;
const graphql_1 = require("gatsby/graphql");
const lodash_1 = require("lodash");
const normalize_1 = require("./normalize");
const builtins = ['ID', 'String', 'Boolean', 'Int', 'Float', 'JSON', 'DateTime', 'Date'];
const wantedNodeTypes = ['ObjectTypeDefinition', 'UnionTypeDefinition', 'InterfaceTypeDefinition'];
const rewriteGraphQLSchema = (schemaSdl, context) => {
    const ast = (0, graphql_1.parse)(schemaSdl);
    const transformedAst = transformAst(ast, context);
    const transformed = (0, graphql_1.print)(transformedAst);
    return transformed;
};
exports.rewriteGraphQLSchema = rewriteGraphQLSchema;
function transformAst(ast, context) {
    return Object.assign(Object.assign({}, ast), { definitions: ast.definitions
            .filter(isWantedAstNode)
            .map((node) => transformDefinitionNode(node, context, ast))
            .concat(getResolveReferencesConfigType()) });
}
function isWantedAstNode(astNode) {
    const node = astNode;
    return wantedNodeTypes.includes(node.kind) && node.name.value !== 'RootQuery';
}
function transformDefinitionNode(node, context, ast) {
    switch (node.kind) {
        case 'ObjectTypeDefinition':
            return transformObjectTypeDefinition(node, context, ast);
        case 'UnionTypeDefinition':
            return transformUnionTypeDefinition(node, context);
        case 'InterfaceTypeDefinition':
            return transformInterfaceTypeDefinition(node, context);
        default:
            return node;
    }
}
function transformObjectTypeDefinition(node, context, ast) {
    const scalars = ast.definitions
        .filter((def) => def.kind === 'ScalarTypeDefinition')
        .map((scalar) => scalar.name.value)
        .concat(graphql_1.specifiedScalarTypes.map((scalar) => scalar.name));
    const fields = node.fields || [];
    const jsonTargets = fields
        .map(getJsonAliasTarget)
        .filter((target) => target !== null);
    const blockFields = jsonTargets.map((target) => makeBlockField(target, context));
    const interfaces = (node.interfaces || []).map((iface) => maybeRewriteType(iface, context));
    const rawFields = getRawFields(fields, scalars);
    // Implement Gatsby node interface if it is a document
    if (isDocumentType(node, context)) {
        interfaces.push({ kind: graphql_1.Kind.NAMED_TYPE, name: { kind: graphql_1.Kind.NAME, value: 'Node' } });
    }
    return Object.assign(Object.assign({}, node), { name: Object.assign(Object.assign({}, node.name), { value: (0, normalize_1.getTypeName)(node.name.value, context.config.typePrefix) }), interfaces, directives: [{ kind: graphql_1.Kind.DIRECTIVE, name: { kind: graphql_1.Kind.NAME, value: 'dontInfer' } }], fields: [
            ...fields
                .filter((field) => !isJsonAlias(field))
                .map((field) => transformFieldNodeAst(field, node, context)),
            ...blockFields,
            ...rawFields,
        ] });
}
function getRawFields(fields, scalars) {
    return fields
        .filter((field) => isJsonAlias(field) || !isScalar(field, scalars))
        .reduce((acc, field) => {
        const jsonAlias = getJsonAliasTarget(field);
        const name = jsonAlias || field.name.value;
        acc.push({
            kind: field.kind,
            name: { kind: graphql_1.Kind.NAME, value: '_' + (0, lodash_1.camelCase)(`raw ${name}`) },
            type: { kind: graphql_1.Kind.NAMED_TYPE, name: { kind: graphql_1.Kind.NAME, value: 'JSON' } },
            arguments: [
                {
                    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
                    name: { kind: graphql_1.Kind.NAME, value: 'resolveReferences' },
                    type: {
                        kind: graphql_1.Kind.NAMED_TYPE,
                        name: { kind: graphql_1.Kind.NAME, value: 'SanityResolveReferencesConfiguration' },
                    },
                },
            ],
        });
        return acc;
    }, []);
}
function isScalar(field, scalars) {
    return scalars.includes(unwrapType(field.type).name.value);
}
function transformUnionTypeDefinition(node, context) {
    return Object.assign(Object.assign({}, node), { types: (node.types || []).map((type) => maybeRewriteType(type, context)), name: Object.assign(Object.assign({}, node.name), { value: (0, normalize_1.getTypeName)(node.name.value, context.config.typePrefix) }) });
}
function transformInterfaceTypeDefinition(node, context) {
    const fields = node.fields || [];
    return Object.assign(Object.assign({}, node), { fields: fields.map((field) => transformFieldNodeAst(field, node, context)), name: Object.assign(Object.assign({}, node.name), { value: (0, normalize_1.getTypeName)(node.name.value, context.config.typePrefix) }) });
}
function unwrapType(typeNode) {
    if (['NonNullType', 'ListType'].includes(typeNode.kind)) {
        const wrappedType = typeNode;
        return unwrapType(wrappedType.type);
    }
    return typeNode;
}
function getJsonAliasTarget(field) {
    const alias = (field.directives || []).find((dir) => dir.name.value === 'jsonAlias');
    if (!alias) {
        return null;
    }
    const forArg = (alias.arguments || []).find((arg) => arg.name.value === 'for');
    if (!forArg) {
        return null;
    }
    return (0, graphql_1.valueFromAST)(forArg.value, graphql_1.GraphQLString, {});
}
function isJsonAlias(field) {
    return getJsonAliasTarget(field) !== null;
}
function makeBlockField(name, context) {
    return {
        kind: graphql_1.Kind.FIELD_DEFINITION,
        name: {
            kind: graphql_1.Kind.NAME,
            value: name,
        },
        arguments: [],
        directives: [],
        type: {
            kind: graphql_1.Kind.LIST_TYPE,
            type: {
                kind: graphql_1.Kind.NAMED_TYPE,
                name: {
                    kind: graphql_1.Kind.NAME,
                    value: (0, normalize_1.getTypeName)('Block', context.config.typePrefix),
                },
            },
        },
    };
}
function makeNullable(nodeType, context) {
    if (nodeType.kind === 'NamedType') {
        return maybeRewriteType(nodeType, context);
    }
    if (nodeType.kind === 'ListType') {
        const unwrapped = maybeRewriteType(unwrapType(nodeType), context);
        return {
            kind: graphql_1.Kind.LIST_TYPE,
            type: makeNullable(unwrapped, context),
        };
    }
    return maybeRewriteType(nodeType.type, context);
}
function isReferenceField(field) {
    return (field.directives || []).some((dir) => dir.name.value === 'reference');
}
function transformFieldNodeAst(node, parent, context) {
    const field = Object.assign(Object.assign({}, node), { name: maybeRewriteFieldName(node, parent, context), type: rewireIdType(makeNullable(node.type, context)), description: undefined, directives: [] });
    if (field.type.kind === 'NamedType' && field.type.name.value === 'Date') {
        field.directives.push({
            kind: graphql_1.Kind.DIRECTIVE,
            name: { kind: graphql_1.Kind.NAME, value: 'dateformat' },
        });
    }
    if (isReferenceField(node)) {
        field.directives.push({
            kind: graphql_1.Kind.DIRECTIVE,
            name: { kind: graphql_1.Kind.NAME, value: 'link' },
            arguments: [
                {
                    kind: graphql_1.Kind.ARGUMENT,
                    name: { kind: graphql_1.Kind.NAME, value: 'from' },
                    value: { kind: graphql_1.Kind.STRING, value: `${field.name.value}._ref` },
                },
            ],
        });
    }
    return field;
}
function rewireIdType(nodeType) {
    if (nodeType.kind === 'NamedType' && nodeType.name.value === 'ID') {
        return Object.assign(Object.assign({}, nodeType), { name: { kind: graphql_1.Kind.NAME, value: 'String' } });
    }
    return nodeType;
}
function maybeRewriteType(nodeType, context) {
    const type = nodeType;
    if (typeof type.name === 'undefined') {
        return nodeType;
    }
    // Gatsby has a date type, but not a datetime, so rewire it
    if (type.name.value === 'DateTime') {
        return Object.assign(Object.assign({}, type), { name: { kind: graphql_1.Kind.NAME, value: 'Date' } });
    }
    if (builtins.includes(type.name.value)) {
        return type;
    }
    return Object.assign(Object.assign({}, type), { name: { kind: graphql_1.Kind.NAME, value: (0, normalize_1.getTypeName)(type.name.value, context.config.typePrefix) } });
}
function maybeRewriteFieldName(field, parent, context) {
    if (!normalize_1.RESTRICTED_NODE_FIELDS.includes(field.name.value)) {
        return field.name;
    }
    if (parent.kind === 'ObjectTypeDefinition' && !isDocumentType(parent, context)) {
        return field.name;
    }
    const parentTypeName = parent.name.value;
    const newFieldName = (0, normalize_1.getConflictFreeFieldName)(field.name.value, context.config.typePrefix);
    context.reporter.warn(`[sanity] Type \`${parentTypeName}\` has field with name \`${field.name.value}\`, which conflicts with Gatsby's internal properties. Renaming to \`${newFieldName}\``);
    return Object.assign(Object.assign({}, field.name), { value: newFieldName });
}
function isDocumentType(node, context) {
    const docTypes = [
        (0, normalize_1.getTypeName)('SanityDocument', context.config.typePrefix),
        'SanityDocument',
        'Document',
    ];
    return (node.interfaces || []).some((iface) => iface.kind === 'NamedType' && docTypes.includes(iface.name.value));
}
function getResolveReferencesConfigType() {
    return {
        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        name: { kind: graphql_1.Kind.NAME, value: 'SanityResolveReferencesConfiguration' },
        fields: [
            {
                kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
                name: { kind: graphql_1.Kind.NAME, value: 'maxDepth' },
                type: {
                    kind: graphql_1.Kind.NON_NULL_TYPE,
                    type: { kind: graphql_1.Kind.NAMED_TYPE, name: { kind: graphql_1.Kind.NAME, value: 'Int' } },
                },
                description: { kind: graphql_1.Kind.STRING, value: 'Max depth to resolve references to' },
            },
        ],
    };
}
//# sourceMappingURL=rewriteGraphQLSchema.js.map